<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4022.9">
  <POU Name="ModbusCommunication" Id="{bf59a4bc-9bbb-44a9-a9e0-c1d2c7fb1f0e}" SpecialFunc="None">
    <Declaration><![CDATA[PROGRAM ModbusCommunication
VAR
	aP1, aP2				: ARRAY [GrundfosRegAddress.listStart..GrundfosRegAddress.listEnd] OF WORD;
	nStep					: INT := 0;
	wP1Control, wP2Control	: ARRAY [100..105] OF WORD := [
		16#8000,
		0,
		0,
		0,
		0,
		600
	];
	wP1Status, wP2Status	: ARRAY[200..220] OF WORD;
END_VAR

VAR CONSTANT
	bP1Addr					: BYTE := 2;
	bP2Addr					: BYTE := 4;
	wStartPumpCmd			: WORD := 16#C000;
	wStopPumpCmd			: WORD := 16#8000;
END_VAR]]></Declaration>
    <Implementation>
      <ST><![CDATA[HWVar.ModbusMaster.ReadRegs(Execute := FALSE);
HWVar.ModbusMaster.WriteRegs(Execute := FALSE);
(*IF GVL.bP1 THEN
	wP1Control := wStartPumpCmd;
ELSE 
	wP1Control := wStopPumpCmd;
END_IF
IF GVL.bP2 THEN
	wP2Control := wStartPumpCmd;
ELSE 
	wP2Control := wStopPumpCmd;
END_IF
*)
CASE nStep OF 
	0: 
		P1Read(); 
	1: 
		P2Read(); 
	2: 
		GrundfosDataConversion(arrReg:= aP1, pstGrundfosMagna3:= ADR(GVL.stP1)); 
		GrundfosDataConversion(arrReg:= aP2, pstGrundfosMagna3:= ADR(GVL.stP2));
		nStep := 3;
	3:
		P1Write();
	4:
		P2Write();
	5:
		P1ReadStatus();
	6:
		P2ReadStatus();
END_CASE;
]]></ST>
    </Implementation>
    <Method Name="GrundfosDataConversion" Id="{e207b614-c65b-464e-b6c3-2ac0f5daff8e}">
      <Declaration><![CDATA[METHOD PUBLIC GrundfosDataConversion : BOOL
VAR_INPUT
	arrReg	: ARRAY [GrundfosRegAddress.listStart..GrundfosRegAddress.listEnd] OF WORD;
	pstGrundfosMagna3	: POINTER TO GrundfosMagna3;
END_VAR

VAR
	iMemIndex: GrundfosRegAddress;
	iRegIndex: GrundfosRegAddress;
	a_MbRegValue	: ARRAY [300..350] OF REAL;
	dwMergedReg		: DWORD;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[WHILE (iMemIndex <  GrundfosRegAddress.listEnd AND iRegIndex < 351) DO
	IF (iRegIndex <> 311) 
		AND (iRegIndex <> 326)
		AND (iRegIndex <> 328) 
		AND (iRegIndex <> 331)
		AND (iRegIndex <> 323)
		AND (iRegIndex <> 342)
		AND (iRegIndex <> 351)
		AND (iRegIndex <> 353)
		AND (iRegIndex <> 356)
		AND (iRegIndex <> 358)
		AND (iRegIndex <> 360) THEN
		a_MbRegValue[iRegIndex] := (arrReg[iMemIndex])*Scale.fGrundfosScale[iRegIndex];
		iMemIndex := iMemIndex + 1;
		iRegIndex := iRegIndex + 1;
	ELSE
		dwMergedReg := SHL(WORD_TO_DWORD(arrReg[iMemIndex]),16) OR WORD_TO_DWORD(arrReg[iMemIndex+1]);
		a_MbRegValue[iRegIndex] := (dwMergedReg)*Scale.fGrundfosScale[iRegIndex];
		iMemIndex := iMemIndex + 2;
		iRegIndex := iRegIndex + 1;
	END_IF
END_WHILE
MEMCPY(pstGrundfosMagna3, ADR(a_MbRegValue), SIZEOF(GrundfosMagna3));]]></ST>
      </Implementation>
    </Method>
    <Method Name="P1Read" Id="{37f61ac5-bad2-4bc1-a0c5-9c26c5ca0162}">
      <Declaration><![CDATA[METHOD PRIVATE P1Read : BOOL
VAR_STAT
	nRegisterAddress	: GrundfosRegAddress;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF (NOT HWVar.ModbusMaster.BUSY) THEN
	HWVar.ModbusMaster.ReadRegs(
		UnitID := bP1Addr,
		Quantity := 62,
		MBAddr := 300,
		cbLength := SIZEOF(aP1),
		pMemoryAddr := ADR(aP1),
		Execute := TRUE,
		Timeout := T#5S,
		BUSY => ,
		Error =>
		);
		nStep := 1;
END_IF;]]></ST>
      </Implementation>
    </Method>
    <Method Name="P1ReadStatus" Id="{f12b8a91-eb20-4bda-b2fe-818f651bf19a}">
      <Declaration><![CDATA[METHOD PRIVATE P1ReadStatus : BOOL
VAR_STAT
	nRegisterAddress	: GrundfosRegAddress;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF (NOT HWVar.ModbusMaster.BUSY) THEN
	HWVar.ModbusMaster.ReadRegs(
		UnitID := bP1Addr,
		Quantity := 21,
		MBAddr := 200,
		cbLength := SIZEOF(wP1Status),
		pMemoryAddr := ADR(wP1Status),
		Execute := TRUE,
		Timeout := T#5S,
		BUSY => ,
		Error =>
		);
		nStep := 6;
END_IF;]]></ST>
      </Implementation>
    </Method>
    <Method Name="P1Write" Id="{c2c97fe8-b21f-4e84-91c2-fecb9f8769ec}">
      <Declaration><![CDATA[METHOD PRIVATE P1Write : BOOL
VAR_STAT
	nRegisterAddress	: GrundfosRegAddress;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF (NOT HWVar.ModbusMaster.BUSY) THEN
	HWVar.ModbusMaster.WriteRegs(
		UnitID := bP1Addr,
		Quantity := 6,
		MBAddr := 100,
		cbLength := SIZEOF(wP1Control),
		pMemoryAddr := ADR(wP1Control),
		Execute := TRUE,
		Timeout := T#5S,
		BUSY => ,
		Error =>
		);
		nStep := 4;
END_IF;]]></ST>
      </Implementation>
    </Method>
    <Method Name="P2Read" Id="{335cbb27-56a2-45cb-b675-2b8cdf6cd692}">
      <Declaration><![CDATA[METHOD PRIVATE P2Read : BOOL
VAR_STAT
	nRegisterAddress	: GrundfosRegAddress;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF (NOT HWVar.ModbusMaster.BUSY) THEN
	HWVar.ModbusMaster.ReadRegs(
		UnitID := bP2Addr,
		Quantity := 62,
		MBAddr := 300,
		cbLength := SIZEOF(aP2),
		pMemoryAddr := ADR(aP2),
		Execute := TRUE,
		Timeout := T#5S,
		BUSY => ,
		Error =>
		);
		nStep := 2;
END_IF;]]></ST>
      </Implementation>
    </Method>
    <Method Name="P2ReadStatus" Id="{7cdbf46a-2edb-4187-b6b1-37fbf76d71da}">
      <Declaration><![CDATA[METHOD PRIVATE P2ReadStatus : BOOL
VAR_STAT
	nRegisterAddress	: GrundfosRegAddress;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF (NOT HWVar.ModbusMaster.BUSY) THEN
	HWVar.ModbusMaster.ReadRegs(
		UnitID := bP2Addr,
		Quantity := 21,
		MBAddr := 200,
		cbLength := SIZEOF(wP2Status),
		pMemoryAddr := ADR(wP2Status),
		Execute := TRUE,
		Timeout := T#5S,
		BUSY => ,
		Error =>
		);
		nStep := 0;
END_IF;]]></ST>
      </Implementation>
    </Method>
    <Method Name="P2Write" Id="{0ecf2a4c-d27b-45a9-a807-0fcd3c9cca9a}">
      <Declaration><![CDATA[METHOD PRIVATE P2Write : BOOL
VAR_STAT
	nRegisterAddress	: GrundfosRegAddress;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF (NOT HWVar.ModbusMaster.BUSY) THEN
	HWVar.ModbusMaster.WriteRegs(
		UnitID := bP2Addr,
		Quantity := 6,
		MBAddr := 100,
		cbLength := SIZEOF(wP2Control),
		pMemoryAddr := ADR(wP2Control),
		Execute := TRUE,
		Timeout := T#5S,
		BUSY => ,
		Error =>
		);
		nStep := 5;
END_IF;]]></ST>
      </Implementation>
    </Method>
    <Action Name="SC01Read" Id="{ec0a3cb0-d056-4f29-9dbb-7c9033aa133f}">
      <Implementation>
        <ST><![CDATA[nStep := 3;]]></ST>
      </Implementation>
    </Action>
    <LineIds Name="ModbusCommunication">
      <LineId Id="13" Count="0" />
      <LineId Id="51" Count="0" />
      <LineId Id="80" Count="1" />
      <LineId Id="88" Count="1" />
      <LineId Id="82" Count="0" />
      <LineId Id="85" Count="1" />
      <LineId Id="91" Count="0" />
      <LineId Id="90" Count="0" />
      <LineId Id="87" Count="0" />
      <LineId Id="84" Count="0" />
      <LineId Id="28" Count="0" />
      <LineId Id="30" Count="0" />
      <LineId Id="37" Count="0" />
      <LineId Id="32" Count="0" />
      <LineId Id="38" Count="0" />
      <LineId Id="33" Count="0" />
      <LineId Id="61" Count="1" />
      <LineId Id="50" Count="0" />
      <LineId Id="74" Count="3" />
      <LineId Id="93" Count="0" />
      <LineId Id="95" Count="0" />
      <LineId Id="94" Count="0" />
      <LineId Id="78" Count="0" />
      <LineId Id="31" Count="0" />
      <LineId Id="15" Count="0" />
    </LineIds>
    <LineIds Name="ModbusCommunication.GrundfosDataConversion">
      <LineId Id="7" Count="1" />
      <LineId Id="26" Count="5" />
      <LineId Id="33" Count="3" />
      <LineId Id="9" Count="8" />
      <LineId Id="5" Count="0" />
      <LineId Id="25" Count="0" />
    </LineIds>
    <LineIds Name="ModbusCommunication.P1Read">
      <LineId Id="7" Count="10" />
      <LineId Id="19" Count="1" />
      <LineId Id="5" Count="0" />
    </LineIds>
    <LineIds Name="ModbusCommunication.P1ReadStatus">
      <LineId Id="25" Count="12" />
      <LineId Id="5" Count="0" />
    </LineIds>
    <LineIds Name="ModbusCommunication.P1Write">
      <LineId Id="7" Count="10" />
      <LineId Id="19" Count="1" />
      <LineId Id="5" Count="0" />
    </LineIds>
    <LineIds Name="ModbusCommunication.P2Read">
      <LineId Id="7" Count="10" />
      <LineId Id="19" Count="1" />
      <LineId Id="5" Count="0" />
    </LineIds>
    <LineIds Name="ModbusCommunication.P2ReadStatus">
      <LineId Id="7" Count="10" />
      <LineId Id="19" Count="1" />
      <LineId Id="5" Count="0" />
    </LineIds>
    <LineIds Name="ModbusCommunication.P2Write">
      <LineId Id="25" Count="12" />
      <LineId Id="5" Count="0" />
    </LineIds>
    <LineIds Name="ModbusCommunication.SC01Read">
      <LineId Id="1" Count="0" />
    </LineIds>
  </POU>
</TcPlcObject>