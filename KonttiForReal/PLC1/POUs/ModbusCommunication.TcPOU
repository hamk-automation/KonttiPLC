<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4022.18">
  <POU Name="ModbusCommunication" Id="{54342e5d-ff54-42da-bebd-97328cd56068}" SpecialFunc="None">
    <Declaration><![CDATA[PROGRAM ModbusCommunication
VAR
	aP1, aP2				: ARRAY [GrundfosRegAddress.listStart..GrundfosRegAddress.listEnd] OF WORD;
	aFeeder					: ARRAY [ATV212RegAddress.listStart..ATV212RegAddress.listEnd] OF WORD;
	nStep					: INT := 0;
	wP1Control, wP2Control	: ARRAY [100..105] OF WORD := [
		16#8000,
		0,
		0,
		0,
		0,
		600
	];
	wFeederControl			: ARRAY [16#1870..16#1871] OF WORD := [
		16#C400,
		16#9C4
	];
	wP1Status, wP2Status	: ARRAY[200..220] OF WORD;
	wFeederStatus			: ARRAY[16#D01..16#E01] OF WORD;
END_VAR

VAR CONSTANT
	bP1Addr					: BYTE := 2;
	bP2Addr					: BYTE := 4;
	bFeederAddr				: BYTE := 5;
	wStartPumpCmd			: WORD := 16#C000;
	wStopPumpCmd			: WORD := 16#8000;
END_VAR]]></Declaration>
    <Implementation>
      <ST><![CDATA[HWVar.ModbusMaster.ReadRegs(Execute := FALSE);
HWVar.ModbusMaster.WriteRegs(Execute := FALSE);
(*IF GVL.bP1 THEN
               wP1Control := wStartPumpCmd;
ELSE 
               wP1Control := wStopPumpCmd;
END_IF
IF GVL.bP2 THEN
               wP2Control := wStartPumpCmd;
ELSE 
               wP2Control := wStopPumpCmd;
END_IF
*)
CASE nStep OF 
	0: 
		P1Read(); 
    1: 
        P2Read(); 
    2: 
        GrundfosDataConversion(arrReg:= aP1, pstGrundfosMagna3:= ADR(GVL.stP1)); 
        GrundfosDataConversion(arrReg:= aP2, pstGrundfosMagna3:= ADR(GVL.stP2));
        nStep := 3;
    3:
        P1Write();
    4:
        P2Write();
    5:
        P1ReadStatus();
    6:
        P2ReadStatus();
    7:
        FeederRead();
        //FeederReadSingle(MBAddr := ATV212RegAddress.EstimatedSpeed, wMBdata := aFeeder[ATV212RegAddress.EstimatedSpeed]);
    8:
        ATV212DataConversion(arrReg := aFeeder, pstATV212 := ADR(GVL.stFeeder));
        nStep := 9;
    9:
        FeederControl();
    10:
        FeederStatus();
        nStep := 0;
END_CASE;
]]></ST>
    </Implementation>
    <Method Name="ATV212DataConversion" Id="{ce9fcc30-4df5-4b9c-8a85-a428ecc2d8c7}">
      <Declaration><![CDATA[METHOD ATV212DataConversion : BOOL
VAR_INPUT
               arrReg   : ARRAY [ATV212RegAddress.listStart..ATV212RegAddress.listEnd] OF WORD;
               pstATV212           : POINTER TO ATV212;
END_VAR

VAR
               iMemIndex: ATV212RegAddress;
               a_MbRegValue  : ARRAY [874..877] OF REAL;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[WHILE (iMemIndex <  ATV212RegAddress.listEnd) DO
                              a_MbRegValue[iMemIndex] := (arrReg[iMemIndex])*Scale.fATV212Scale[iMemIndex];
                              iMemIndex := iMemIndex + 1;
END_WHILE
MEMCPY(pstATV212, ADR(a_MbRegValue), SIZEOF(ATV212));
]]></ST>
      </Implementation>
    </Method>
    <Method Name="FeederControl" Id="{41e60fd5-d07e-4b1b-b684-fef6b25a1501}">
      <Declaration><![CDATA[METHOD FeederControl : BOOL
VAR_INPUT
END_VAR

VAR
	fbStartStop: RS;
	reStart: R_TRIG;
	iFrequency: INT;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[reStart(CLK:= gvl.stFeederControl.bStart, Q=> );
fbStartStop(SET:= gvl.stFeederControl.bStart, RESET1:= gvl.stFeederControl.bStop, Q1=> );
IF fbStartStop.Q1 THEN
	iFrequency := REAL_TO_INT(gvl.stFeederControl.fFrequency/0.01);
	wFeederControl[16#1871] := INT_TO_WORD(iFrequency);
	IF gvl.stFeederControl.bForward THEN
		wFeederControl[16#1870] := 16#C400;
		ELSE wFeederControl[16#1870] := 16#C600;
	END_IF
	FeederWrite(wFeederControl);
ELSE
	wFeederControl[16#1870] := 16#C000;
	FeederWrite(wFeederControl);
END_IF
nStep := 10;]]></ST>
      </Implementation>
    </Method>
    <Method Name="FeederRead" Id="{51922873-5ebe-4adb-8f91-0160af3c5ec4}">
      <Declaration><![CDATA[METHOD FeederRead : BOOL
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF (NOT HWVar.ModbusMaster.BUSY) THEN
	HWVar.ModbusMaster.ReadRegs(
		UnitID := bFeederAddr,
		Quantity := 4,
		MBAddr := 16#1874,
		cbLength := SIZEOF(aFeeder),
		pMemoryAddr := ADR(aFeeder),
		Execute := TRUE,
		Timeout := T#5S,
		BUSY => ,
		Error =>
		);
		nStep := 8;
END_IF;]]></ST>
      </Implementation>
    </Method>
    <Method Name="FeederReadSingle" Id="{087dd7a2-4d18-4f20-a629-8f15bc3e6957}">
      <Declaration><![CDATA[METHOD FeederReadSingle : BOOL
VAR_INPUT
	MBAddr: WORD;
	wMBData: WORD;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF (NOT HWVar.ModbusMaster.BUSY) THEN
	HWVar.ModbusMaster.ReadRegs(
		UnitID := bFeederAddr,
		Quantity := 1,
		MBAddr := MBAddr,
		cbLength := SIZEOF(wMBData),
		pMemoryAddr := ADR(wMBData),
		Execute := TRUE,
		Timeout := T#5S,
		BUSY => ,
		Error =>
		);
		nStep := 2;
END_IF;]]></ST>
      </Implementation>
    </Method>
    <Method Name="FeederStatus" Id="{954db622-fd24-4190-936a-3ec3927809d4}">
      <Declaration><![CDATA[METHOD FeederStatus : BOOL
VAR_INPUT

END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF (NOT HWVar.ModbusMaster.BUSY) THEN
	HWVar.ModbusMaster.ReadRegs(
		UnitID := bFeederAddr,
		Quantity := 1,
		MBAddr := 16#D01,
		cbLength := SIZEOF(wFeederStatus),
		pMemoryAddr := ADR(wFeederStatus),
		Execute := TRUE,
		Timeout := T#5S,
		BUSY => ,
		Error =>
		);
		nStep := 0;
END_IF;]]></ST>
      </Implementation>
    </Method>
    <Method Name="FeederWrite" Id="{2f47265f-2ad5-409f-b44a-d3a6fc003144}">
      <Declaration><![CDATA[METHOD FeederWrite : BOOL
VAR_INPUT
		wControl: ARRAY [16#1870..16#1871] OF WORD;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF (NOT HWVar.ModbusMaster.BUSY) THEN
	HWVar.ModbusMaster.ReadRegs(
		UnitID := bFeederAddr,
		Quantity := 2,
		MBAddr := 16#1870,
		cbLength := SIZEOF(wFeederControl),
		pMemoryAddr := ADR(wFeederControl),
		Execute := TRUE,
		Timeout := T#5S,
		BUSY => ,
		Error =>
		);		
END_IF;]]></ST>
      </Implementation>
    </Method>
    <Method Name="GrundfosDataConversion" Id="{c1721abb-801a-40d2-a1fb-1b489e79040e}">
      <Declaration><![CDATA[METHOD PUBLIC GrundfosDataConversion : BOOL
VAR_INPUT
	arrReg	: ARRAY [GrundfosRegAddress.listStart..GrundfosRegAddress.listEnd] OF WORD;
	pstGrundfosMagna3	: POINTER TO GrundfosMagna3;
END_VAR

VAR
	iMemIndex: GrundfosRegAddress;
	iRegIndex: GrundfosRegAddress;
	a_MbRegValue	: ARRAY [300..350] OF REAL;
	dwMergedReg		: DWORD;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[WHILE (iMemIndex <  GrundfosRegAddress.listEnd AND iRegIndex < 351) DO
	IF (iRegIndex <> 311) 
		AND (iRegIndex <> 326)
		AND (iRegIndex <> 328) 
		AND (iRegIndex <> 331)
		AND (iRegIndex <> 333)
		AND (iRegIndex <> 342)
		AND (iRegIndex <> 351)
		AND (iRegIndex <> 353)
		AND (iRegIndex <> 356)
		AND (iRegIndex <> 358)
		AND (iRegIndex <> 360) THEN
		a_MbRegValue[iRegIndex] := (arrReg[iMemIndex])*Scale.fGrundfosScale[iRegIndex];
		iMemIndex := iMemIndex + 1;
		iRegIndex := iRegIndex + 1;
	ELSE
		dwMergedReg := SHL(WORD_TO_DWORD(arrReg[iMemIndex]),16) OR WORD_TO_DWORD(arrReg[iMemIndex+1]);
		a_MbRegValue[iRegIndex] := (dwMergedReg)*Scale.fGrundfosScale[iRegIndex];
		iMemIndex := iMemIndex + 2;
		iRegIndex := iRegIndex + 1;
	END_IF
END_WHILE
MEMCPY(pstGrundfosMagna3, ADR(a_MbRegValue), SIZEOF(GrundfosMagna3));]]></ST>
      </Implementation>
    </Method>
    <Method Name="P1Read" Id="{c73de48b-54bb-496d-9d86-0a4cfa2e1c2d}">
      <Declaration><![CDATA[METHOD PRIVATE P1Read : BOOL
VAR_STAT
	nRegisterAddress	: GrundfosRegAddress;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF (NOT HWVar.ModbusMaster.BUSY) THEN
	HWVar.ModbusMaster.ReadRegs(
		UnitID := bP1Addr,
		Quantity := 62,
		MBAddr := 300,
		cbLength := SIZEOF(aP1),
		pMemoryAddr := ADR(aP1),
		Execute := TRUE,
		Timeout := T#5S,
		BUSY => ,
		Error =>
		);
		nStep := 1;
END_IF;]]></ST>
      </Implementation>
    </Method>
    <Method Name="P1ReadStatus" Id="{e940be54-64b5-4d76-a9c5-9116d1bfcb8d}">
      <Declaration><![CDATA[METHOD PRIVATE P1ReadStatus : BOOL
VAR_STAT
	nRegisterAddress	: GrundfosRegAddress;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF (NOT HWVar.ModbusMaster.BUSY) THEN
	HWVar.ModbusMaster.ReadRegs(
		UnitID := bP1Addr,
		Quantity := 21,
		MBAddr := 200,
		cbLength := SIZEOF(wP1Status),
		pMemoryAddr := ADR(wP1Status),
		Execute := TRUE,
		Timeout := T#5S,
		BUSY => ,
		Error =>
		);
		nStep := 6;
END_IF;]]></ST>
      </Implementation>
    </Method>
    <Method Name="P1Write" Id="{8455cd7a-6f3b-4703-a7c5-04d6e9cb6cc9}">
      <Declaration><![CDATA[METHOD PRIVATE P1Write : BOOL
VAR_STAT
	nRegisterAddress	: GrundfosRegAddress;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF (NOT HWVar.ModbusMaster.BUSY) THEN
	HWVar.ModbusMaster.WriteRegs(
		UnitID := bP1Addr,
		Quantity := 6,
		MBAddr := 100,
		cbLength := SIZEOF(wP1Control),
		pMemoryAddr := ADR(wP1Control),
		Execute := TRUE,
		Timeout := T#5S,
		BUSY => ,
		Error =>
		);
		nStep := 4;
END_IF;]]></ST>
      </Implementation>
    </Method>
    <Method Name="P2Read" Id="{ff14c237-e459-4ec9-871d-74c9239e39c7}">
      <Declaration><![CDATA[METHOD PRIVATE P2Read : BOOL
VAR_STAT
	nRegisterAddress	: GrundfosRegAddress;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF (NOT HWVar.ModbusMaster.BUSY) THEN
	HWVar.ModbusMaster.ReadRegs(
		UnitID := bP2Addr,
		Quantity := 62,
		MBAddr := 300,
		cbLength := SIZEOF(aP2),
		pMemoryAddr := ADR(aP2),
		Execute := TRUE,
		Timeout := T#5S,
		BUSY => ,
		Error =>
		);
		nStep := 2;
END_IF;]]></ST>
      </Implementation>
    </Method>
    <Method Name="P2ReadStatus" Id="{3caf89c1-a318-494c-aba5-1c31ed772b4f}">
      <Declaration><![CDATA[METHOD PRIVATE P2ReadStatus : BOOL
VAR_STAT
	nRegisterAddress	: GrundfosRegAddress;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF (NOT HWVar.ModbusMaster.BUSY) THEN
	HWVar.ModbusMaster.ReadRegs(
		UnitID := bP2Addr,
		Quantity := 21,
		MBAddr := 200,
		cbLength := SIZEOF(wP2Status),
		pMemoryAddr := ADR(wP2Status),
		Execute := TRUE,
		Timeout := T#5S,
		BUSY => ,
		Error =>
		);
		nStep := 7;
END_IF;]]></ST>
      </Implementation>
    </Method>
    <Method Name="P2Write" Id="{ef6bb6ba-d829-4627-81b3-f21a4dbedaa5}">
      <Declaration><![CDATA[METHOD PRIVATE P2Write : BOOL
VAR_STAT
	nRegisterAddress	: GrundfosRegAddress;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF (NOT HWVar.ModbusMaster.BUSY) THEN
	HWVar.ModbusMaster.WriteRegs(
		UnitID := bP2Addr,
		Quantity := 6,
		MBAddr := 100,
		cbLength := SIZEOF(wP2Control),
		pMemoryAddr := ADR(wP2Control),
		Execute := TRUE,
		Timeout := T#5S,
		BUSY => ,
		Error =>
		);
		nStep := 5;
END_IF;]]></ST>
      </Implementation>
    </Method>
    <Action Name="SC01Read" Id="{8e355383-73d5-444b-a223-41e8c10c9f5c}">
      <Implementation>
        <ST><![CDATA[nStep := 3;]]></ST>
      </Implementation>
    </Action>
    <LineIds Name="ModbusCommunication">
      <LineId Id="254" Count="41" />
      <LineId Id="15" Count="0" />
    </LineIds>
    <LineIds Name="ModbusCommunication.ATV212DataConversion">
      <LineId Id="16" Count="4" />
      <LineId Id="5" Count="0" />
    </LineIds>
    <LineIds Name="ModbusCommunication.FeederControl">
      <LineId Id="20" Count="0" />
      <LineId Id="19" Count="0" />
      <LineId Id="25" Count="0" />
      <LineId Id="34" Count="1" />
      <LineId Id="38" Count="1" />
      <LineId Id="41" Count="0" />
      <LineId Id="40" Count="0" />
      <LineId Id="26" Count="0" />
      <LineId Id="28" Count="0" />
      <LineId Id="37" Count="0" />
      <LineId Id="29" Count="0" />
      <LineId Id="27" Count="0" />
      <LineId Id="42" Count="0" />
    </LineIds>
    <LineIds Name="ModbusCommunication.FeederRead">
      <LineId Id="6" Count="12" />
      <LineId Id="5" Count="0" />
    </LineIds>
    <LineIds Name="ModbusCommunication.FeederReadSingle">
      <LineId Id="6" Count="12" />
      <LineId Id="5" Count="0" />
    </LineIds>
    <LineIds Name="ModbusCommunication.FeederStatus">
      <LineId Id="6" Count="12" />
      <LineId Id="5" Count="0" />
    </LineIds>
    <LineIds Name="ModbusCommunication.FeederWrite">
      <LineId Id="6" Count="11" />
      <LineId Id="5" Count="0" />
    </LineIds>
    <LineIds Name="ModbusCommunication.GrundfosDataConversion">
      <LineId Id="7" Count="1" />
      <LineId Id="26" Count="5" />
      <LineId Id="33" Count="3" />
      <LineId Id="9" Count="8" />
      <LineId Id="5" Count="0" />
      <LineId Id="25" Count="0" />
    </LineIds>
    <LineIds Name="ModbusCommunication.P1Read">
      <LineId Id="7" Count="10" />
      <LineId Id="19" Count="1" />
      <LineId Id="5" Count="0" />
    </LineIds>
    <LineIds Name="ModbusCommunication.P1ReadStatus">
      <LineId Id="25" Count="12" />
      <LineId Id="5" Count="0" />
    </LineIds>
    <LineIds Name="ModbusCommunication.P1Write">
      <LineId Id="7" Count="10" />
      <LineId Id="19" Count="1" />
      <LineId Id="5" Count="0" />
    </LineIds>
    <LineIds Name="ModbusCommunication.P2Read">
      <LineId Id="7" Count="10" />
      <LineId Id="19" Count="1" />
      <LineId Id="5" Count="0" />
    </LineIds>
    <LineIds Name="ModbusCommunication.P2ReadStatus">
      <LineId Id="7" Count="10" />
      <LineId Id="19" Count="1" />
      <LineId Id="5" Count="0" />
    </LineIds>
    <LineIds Name="ModbusCommunication.P2Write">
      <LineId Id="25" Count="12" />
      <LineId Id="5" Count="0" />
    </LineIds>
    <LineIds Name="ModbusCommunication.SC01Read">
      <LineId Id="1" Count="0" />
    </LineIds>
  </POU>
</TcPlcObject>